input {
    jdbc { 
        jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://my_database:3306/teamproject"
        jdbc_user => "root"
        jdbc_password => "root"
        schedule => "* * * * *" 
        use_column_value => true
        tracking_column => "updatedat" 
        last_run_metadata_path => "./aaa.txt" 
        tracking_column_type => "numeric"
        # statement => "select p.id, p.name, p.description, p.price, p.view, p.like, p.urls, p.user, unix_timestamp(p.updatedat) as updatedat from product as p where unix_timestamp(p.updatedat) > :sql_last_value order by updatedat asc" #like가 안들어가는 이유는 like는 sql의 문법이기 때문이다 
        # product와 user를 join 하기 전에 product에서 userId를 추출해보자. 만약 이게 된다면 join도 될 것이다.
        # statement => "select p.id, p.name, p.description, p.price, p.view, p.like, p.urls, p.userid, unix_timestamp(p.updatedat) as updatedat from product as p where unix_timestamp(p.updatedat) > :sql_last_value order by updatedat asc"
        # statement => "select p.id, p.name, p.description, p.price, p.view, p.like, p.urls,  p.userid, unix_timestamp(p.updatedat) as updatedat, user.nickname from product as p left join user on p.userid = user.id where unix_timestamp(p.updatedat) > :sql_last_value order by updatedat asc" 
        statement => "select p.name, unix_timestamp(p.updatedat) as updatedat, u.name from product as p left join user as u on p.userid = u.id where unix_timestamp(p.updatedat) > :sql_last_value order by updatedat asc" 
    } 
}

output {
    elasticsearch {
        hosts => "elasticsearch:9200"
        index => "testproduct7"
    }
}